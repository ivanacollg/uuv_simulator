<launch>
    <!-- If you want to generate a ROS bag with the recorded simulated data, set this flag to true -->
    <arg name="record" default="false"/>
    <arg name="world" default="penns_landing"/>
    <arg name="uuv_name" default="rexrov"/>


    <!-- Start the a underwater world simulation scenario -->    
    <include file="$(find uuv_gazebo_worlds)/launch/$(arg world).launch"/>

    <!-- Add the RexROV vehicle to the simulation (namespace: rexrov) -->
    <include file="$(find uuv_bruce_teleop)/launch/rexrov_sonar.launch">
        <arg name="x" default="0"/> 
        <arg name="y" default="0"/> <!--Flip sign -19.3759 19.7557 -2.82806--> 
        <arg name="z" default="-1.5"/> <!--RFAL land -1 meters, Penns Landing -1.5 meters-->
        <arg name="yaw" default="0"/>  <!--Flip sign --> 
        <arg name="mode" default="sonar"/>
    </include>

    <!--remap from="/rexrov/cmd_vel" to="/cmd_vel"/-->
    <!-- Start the controller -->
    <!--include file="$(find uuv_tutorial_dp_controller)/launch/start_tutorial_dp_controller.launch">
        <arg name="uuv_name" value="rexrov"/>
        <arg name="model_name" value="rexrov"/>
    </include-->

    <include file="$(find uuv_thruster_manager)/launch/thruster_manager.launch">
        <arg name="uuv_name" value="$(arg uuv_name)" />
        <arg name="model_name" value="$(arg uuv_name)" />
    </include>

    <group ns="$(arg uuv_name)">
        <rosparam file="$(find uuv_control_cascaded_pid)/config/$(arg uuv_name)/inertial.yaml" command="load"/>
        <rosparam file="$(find uuv_control_cascaded_pid)/config/$(arg uuv_name)/vel_pid_control.yaml" command="load"/>

        <node pkg="uuv_control_cascaded_pid" type="AccelerationControl.py" name="acceleration_control"
            output="screen">
        <param name="tf_prefix" type="string" value="$(arg uuv_name)/" />
        </node>

        <node pkg="uuv_control_cascaded_pid" type="VelocityControl.py" name="velocity_control"
            output="screen">
        <remap from="odom" to="/$(arg uuv_name)/pose_gt"/>
        <remap from="cmd_accel" to="/$(arg uuv_name)/cmd_accel"/>
        </node>
    </group>

    <!-- Start the recording node  -->
    <!--include file="$(find uuv_gazebo)/launch/controller_demos/record_demo.launch">
      <arg name="record" value="$(arg record)"/>
    </include-->

    <!-- Open RViz for visualization of sensor data and visualization markers -->
    <node name="rviz" pkg="rviz" type="rviz" output="screen" args="-d $(find uuv_bruce_teleop)/rviz/bruce_exploration.rviz"/>

    <!--
    You can run this demo as

    >> roslaunch uuv_tutorial_dp_controller start_tutorial_dp_controller_demo.launch

    and you can then send some waypoints to the vehicle to see it working

    >> roslaunch uuv_control_utils send_waypoints_file.launch uuv_name:=rexrov
    -->
</launch>
